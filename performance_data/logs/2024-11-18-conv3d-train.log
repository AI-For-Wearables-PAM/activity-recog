Testing with parameters: {'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 8, 'epochs': 30}

Iteration 1/3
C:\Users\james\.conda\envs\recog\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2024-11-18 10:50:33.037692: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags. 
Epoch 1/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 38s 320ms/step - accuracy: 0.3592 - loss: 6.4843 - val_accuracy: 0.1316 - val_loss: 6.8597      
Epoch 2/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 313ms/step - accuracy: 0.5928 - loss: 1.4563 - val_accuracy: 0.4342 - val_loss: 1.8544
Epoch 3/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.6402 - loss: 1.0717 - val_accuracy: 0.6798 - val_loss: 0.9033
Epoch 4/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.7147 - loss: 0.7638 - val_accuracy: 0.6316 - val_loss: 0.9348
Epoch 5/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.7076 - loss: 0.7928 - val_accuracy: 0.6360 - val_loss: 0.8944
Epoch 6/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.7090 - loss: 0.7848 - val_accuracy: 0.7412 - val_loss: 0.8096
Epoch 7/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.7789 - loss: 0.6068 - val_accuracy: 0.7281 - val_loss: 0.7662
Epoch 8/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.7642 - loss: 0.6183 - val_accuracy: 0.6798 - val_loss: 0.7122
Epoch 9/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.8029 - loss: 0.5135 - val_accuracy: 0.7237 - val_loss: 0.8147
Epoch 10/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.7765 - loss: 0.5797 - val_accuracy: 0.8114 - val_loss: 0.5633
Epoch 11/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.7918 - loss: 0.6037 - val_accuracy: 0.6228 - val_loss: 0.8938
Epoch 12/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.7926 - loss: 0.5099 - val_accuracy: 0.8421 - val_loss: 0.4703
Epoch 13/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.7963 - loss: 0.5837 - val_accuracy: 0.8246 - val_loss: 0.4831
Epoch 14/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 309ms/step - accuracy: 0.7719 - loss: 0.5314 - val_accuracy: 0.8114 - val_loss: 0.5191
Epoch 15/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.8238 - loss: 0.4722 - val_accuracy: 0.6053 - val_loss: 0.8552
Epoch 16/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.8174 - loss: 0.5437 - val_accuracy: 0.7851 - val_loss: 0.5484
Epoch 17/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.8335 - loss: 0.4700 - val_accuracy: 0.8202 - val_loss: 0.6102
Epoch 18/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8124 - loss: 0.4847 - val_accuracy: 0.8114 - val_loss: 0.4817
Epoch 19/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8340 - loss: 0.4289 - val_accuracy: 0.8114 - val_loss: 0.6649
Epoch 20/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8403 - loss: 0.3908 - val_accuracy: 0.8421 - val_loss: 0.4307
Epoch 21/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8394 - loss: 0.4155 - val_accuracy: 0.8289 - val_loss: 0.5002
Epoch 22/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.8316 - loss: 0.4251 - val_accuracy: 0.7895 - val_loss: 0.6105
Epoch 23/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.8064 - loss: 0.5260 - val_accuracy: 0.8596 - val_loss: 0.4004
Epoch 24/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8555 - loss: 0.3877 - val_accuracy: 0.8246 - val_loss: 0.4533
Epoch 25/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.8698 - loss: 0.4314 - val_accuracy: 0.8114 - val_loss: 0.5091
Epoch 26/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8657 - loss: 0.4073 - val_accuracy: 0.8246 - val_loss: 0.5481
Epoch 27/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8650 - loss: 0.4086 - val_accuracy: 0.8289 - val_loss: 0.4628
Epoch 28/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8564 - loss: 0.3798 - val_accuracy: 0.7632 - val_loss: 0.6175
Epoch 29/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 305ms/step - accuracy: 0.8218 - loss: 0.5281 - val_accuracy: 0.8158 - val_loss: 0.4713
Epoch 30/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 304ms/step - accuracy: 0.8394 - loss: 0.4033 - val_accuracy: 0.8684 - val_loss: 0.3574
8/8 ━━━━━━━━━━━━━━━━━━━━ 2s 177ms/step
Iteration 1 Validation Accuracy: 0.868421052631579
Best model saved with accuracy 0.868421052631579

Iteration 2/3
C:\Users\james\.conda\envs\recog\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Epoch 1/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 37s 315ms/step - accuracy: 0.3693 - loss: 6.5335 - val_accuracy: 0.2149 - val_loss: 6.2413
Epoch 2/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 307ms/step - accuracy: 0.6054 - loss: 1.2646 - val_accuracy: 0.4825 - val_loss: 1.6062
Epoch 3/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 309ms/step - accuracy: 0.6459 - loss: 1.0401 - val_accuracy: 0.6623 - val_loss: 0.9409
Epoch 4/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 308ms/step - accuracy: 0.6413 - loss: 0.9951 - val_accuracy: 0.7193 - val_loss: 0.8516
Epoch 5/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 308ms/step - accuracy: 0.6926 - loss: 0.7993 - val_accuracy: 0.5044 - val_loss: 1.3882
Epoch 6/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 308ms/step - accuracy: 0.6778 - loss: 0.8910 - val_accuracy: 0.7325 - val_loss: 0.7612
Epoch 7/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.7326 - loss: 0.7233 - val_accuracy: 0.7588 - val_loss: 0.7354
Epoch 8/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 314ms/step - accuracy: 0.7574 - loss: 0.6727 - val_accuracy: 0.7281 - val_loss: 0.7658
Epoch 9/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.7420 - loss: 0.5893 - val_accuracy: 0.7105 - val_loss: 0.8867
Epoch 10/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.7645 - loss: 0.6032 - val_accuracy: 0.6228 - val_loss: 0.9184
Epoch 11/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.7865 - loss: 0.5838 - val_accuracy: 0.8202 - val_loss: 0.7688
Epoch 12/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 313ms/step - accuracy: 0.7793 - loss: 0.6361 - val_accuracy: 0.7456 - val_loss: 0.9124
Epoch 13/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 312ms/step - accuracy: 0.7482 - loss: 0.6405 - val_accuracy: 0.7719 - val_loss: 0.5410
Epoch 14/30
67 - val_accuracy: 0.7500 - val_loss: 0.7678
Epoch 15/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.7946 - loss: 0.5156 - val_accuracy: 0.8421 - val_loss: 0.4606
Epoch 16/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 311ms/step - accuracy: 0.8296 - loss: 0.4751 - val_accuracy: 0.6140 - val_loss: 1.1416
Epoch 17/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 311ms/step - accuracy: 0.8118 - loss: 0.4715 - val_accuracy: 0.6711 - val_loss: 1.0349
Epoch 18/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 312ms/step - accuracy: 0.8426 - loss: 0.4527 - val_accuracy: 0.8202 - val_loss: 0.4587
Epoch 19/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 309ms/step - accuracy: 0.8323 - loss: 0.4424 - val_accuracy: 0.7895 - val_loss: 0.4920
Epoch 20/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 37s 322ms/step - accuracy: 0.8122 - loss: 0.5040 - val_accuracy: 0.7719 - val_loss: 0.6360
Epoch 21/30
 71/114 ━━━━━━━━━━━━━━━━━━━━ 13s 310ms/step - accuracy: 0.8129 - loss: 0.43 72/114 ━━━━━━━━━━━━━━━━━━━━ 13s 310ms/step - accuracy: 0.8128 - loss: 0.43 73/114 ━━━━━━━━━━━━━━━━━━━━ 12s 310ms/step - accuracy: 0.8127 - loss: 0.44 74/114 ━━━━━━━━━━━━━━━━━━━━ 12s 310ms/step - accuracy: 0.8126 - loss: 0.44 75/114 ━━━━━━━━━━━━━━━━━━━━ 12s 310ms/step  77/114 ━━━━━━━━━━━━━━━━114/114 ━━━━━━━━━━━━━━━━━━━━ 37s 322ms/step - accuracy: 0.8111 - loss: 0.4733 - val_accuracy: 0.6798 - val_loss: 0.7779
Epoch 22/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.8156 - loss: 0.4909 - val_accuracy: 0.8640 - val_loss: 0.4481
Epoch 23/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 313ms/step - accuracy: 0.8462 - loss: 0.3942 - val_accuracy: 0.8640 - val_loss: 0.4038
Epoch 24/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 313ms/step - accuracy: 0.8322 - loss: 0.4363 - val_accuracy: 0.7105 - val_loss: 1.0144
Epoch 25/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 314ms/step - accuracy: 0.8390 - loss: 0.4430 - val_accuracy: 0.8684 - val_loss: 0.4075
Epoch 26/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 315ms/step - accuracy: 0.8333 - loss: 0.4535 - val_accuracy: 0.8377 - val_loss: 0.5411
Epoch 27/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 312ms/step - accuracy: 0.8526 - loss: 0.4262 - val_accuracy: 0.7851 - val_loss: 0.7070
Epoch 28/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 312ms/step - accuracy: 0.7829 - loss: 0.5854 - val_accuracy: 0.8465 - val_loss: 0.5309
Epoch 29/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 313ms/step - accuracy: 0.7874 - loss: 0.5362 - val_accuracy: 0.8202 - val_loss: 0.5285
Epoch 30/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 314ms/step - accuracy: 0.8505 - loss: 0.4191 - val_accuracy: 0.8114 - val_loss: 0.5137
8/8 ━━━━━━━━━━━━━━━━━━━━ 2s 179ms/step
Iteration 2 Validation Accuracy: 0.8114035087719298

Iteration 3/3
C:\Users\james\.conda\envs\recog\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Epoch 1/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 37s 313ms/step - accuracy: 0.3873 - loss: 6.0925 - val_accuracy: 0.2412 - val_loss: 2.0393
Epoch 2/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 314ms/step - accuracy: 0.5505 - loss: 1.3451 - val_accuracy114/114 ━━━━━━━━━━━━━━━━━━━━ 37s 313ms/step - accuracy: 0.3873 - loss: 6.0925 - val_accuracy: 0.2412 - val_loss: 2.0393
Epoch 2/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 314ms/step - accuracy: 0.5505 - loss: 1.3451 - val_accuracyEpoch 2/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 314ms/step - accuracy: 0.5505 - loss: 1.3451 - val_accuracy114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 314ms/step - accuracy: 0.5505 - loss: 1.3451 - val_accuracy: 0.6360 - val_loss: 1.0468
Epoch 3/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 312ms/step - accuracy: 0.6265 - loss: 1.0138 - val_accuracy: 0.7588 - val_loss: 0.7484
: 0.6360 - val_loss: 1.0468
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.7109 - loss: 0.8217 - val_accuracy: 0.7105 - val_loss: 0.8271      
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.7109 - loss: 0.8217 - val_accuracy: 0.7105 - val_loss: 0.8271      
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.7109 - loss: 0.8217 - val_accuracy: 0.7105 - val_loss: 0.8271      
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.7109 - loss: 0.8217 - val_accuracy: 0.7105 - val_loss: 0.8271      
Epoch 6/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.7037 - loss: 0.8456 - val_accuracy: 0.7895 - val_loss: 0.6339      
Epoch 7/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.7381 - loss: 0.7543 - val_accuracy: 0.5702 - val_loss: 1.3294      
Epoch 8/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.7211 - loss: 0.7750 - val_accuracy: 0.7982 - val_loss: 0.6447      
Epoch 9/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.7333 - loss: 0.7253 - val_accuracy: 0.8246 - val_loss: 0.4905      
Epoch 10/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.7624 - loss: 0.6574 - val_accuracy: 0.8158 - val_loss: 0.4740      
Epoch 11/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 309ms/step - accuracy: 0.7666 - loss: 0.6118 - val_accuracy: 0.8553 - val_loss: 0.5388      
Epoch 12/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 309ms/step - accuracy: 0.7834 - loss: 0.5392 - val_accuracy: 0.8026 - val_loss: 0.5022      
Epoch 13/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.8013 - loss: 0.5375 - val_accuracy: 0.8421 - val_loss: 0.4967      
Epoch 14/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 315ms/step - accuracy: 0.8324 - loss: 0.4596 - val_accuracy: 0.8684 - val_loss: 0.4806      
Epoch 15/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 314ms/step - accuracy: 0.7952 - loss: 0.5929 - val_accuracy: 0.8465 - val_loss: 0.4091      
Epoch 16/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.7989 - loss: 0.5443 - val_accuracy: 0.8465 - val_loss: 0.4975      
Epoch 17/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 316ms/step - accuracy: 0.8286 - loss: 0.4526 - val_accuracy: 0.8728 - val_loss: 0.3966
Epoch 18/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 315ms/step - accuracy: 0.8531 - loss: 0.3840 - val_accuracy: 0.8947 - val_loss: 0.4333
Epoch 19/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 308ms/step - accuracy: 0.8458 - loss: 0.4673 - val_accuracy: 0.8070 - val_loss: 0.5891
Epoch 20/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 312ms/step - accuracy: 0.8246 - loss: 0.4372 - val_accuracy: 0.8816 - val_loss: 0.4200
Epoch 21/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 311ms/step - accuracy: 0.8404 - loss: 0.4140 - val_accuracy: 0.8070 - val_loss: 0.5847
Epoch 22/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.8589 - loss: 0.3757 - val_accuracy: 0.8377 - val_loss: 0.7176
Epoch 23/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 309ms/step - accuracy: 0.8385 - loss: 0.5153 - val_accuracy: 0.8246 - val_loss: 0.4874
Epoch 24/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 307ms/step - accuracy: 0.8517 - loss: 0.4463 - val_accuracy: 0.6974 - val_loss: 0.7760
Epoch 25/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 307ms/step - accuracy: 0.8575 - loss: 0.4003 - val_accuracy: 0.7675 - val_loss: 0.8420
Epoch 26/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 309ms/step - accuracy: 0.8733 - loss: 0.4052 - val_accuracy: 0.8816 - val_loss: 0.3693
Epoch 27/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 308ms/step - accuracy: 0.8807 - loss: 0.2928 - val_accuracy: 0.8640 - val_loss: 0.4137
Epoch 28/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 310ms/step - accuracy: 0.8510 - loss: 0.3561 - val_accuracy: 0.8596 - val_loss: 1.0989
Epoch 29/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 36s 312ms/step - accuracy: 0.8623 - loss: 0.3549 - val_accuracy: 0.8377 - val_loss: 0.5251
Epoch 30/30
114/114 ━━━━━━━━━━━━━━━━━━━━ 35s 306ms/step - accuracy: 0.8287 - loss: 0.4357 - val_accuracy: 0.8860 - val_loss: 0.4025
WARNING:tensorflow:5 out of the last 17 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed addistributed at 0x0000016CD813A660> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
8/8 ━━━━━━━━━━━━━━━━━━━━ 2s 178ms/step
Iteration 3 Validation Accuracy: 0.8859649122807017
Best model saved with accuracy 0.8859649122807017

Best hyperparameters: {'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 8, 'epochs': 30} with accuracy: 0.8859649122807017
True labels: [ 8 11  4  5  3  0  5  2  8  2  0 11  2  5  5  7  0  5  0  3  0  9  6  5
  2  3 11  9  6  8  5  2  2  7  5 11  7  5  3  6  9  8  0  6  7  0  0  2
  2  2  5  5  7  7  0  6  2  2  9 11  0  5  0  6  7  6  0  2  5  0 11  3
  6  7  6  4 11  5  0  9  0  2  7  5  3  5  4  2  0  2  0  0  8  6 11  0
  6  2  0  6  0  2  6  2  6  7  6  0  6  6  7  4  4  7  5 11  0  2  6  6
  5  3  6  8  4 11  4  2  0  2  0  2  2  6  6  0  9  0  8  4  0 11  0  3
  2  5  7  7 11  7 11  0  2 11  2  0 11  9  4  3 11  9  2  7  0  0  2  2
  8  2 11  6  7  7  3 11  0  2  4  4  7 11  2  7  2 11  5  8  0  0  0  7
  0  0  0  2  7  0  0  6  0 11  0  5  5  0 11  0  0  2  8  5  3 11  8  0
  8  0  6  4  5  0  0  0  0  1  7  3]
Predicted labels: [ 8 11  4  5  3  0  5  2  8  2  0 11  2  5  5  7  0  0  0 11  0  9  6 11
  2  3 11  6  6  8  5  2  2  7  0 11  7  5  3  6  9  8  0  6  7  0  5  2
  2  2  5  5  7  7  6  6  2  2  9 11  0  5  0  6  7  6  0  2  5  0 11  0
  0  7  3  4 11  5  0  9  0  2  7  5  3  0  4  2  0  2  0  0  8  6 11  0
  3  2  0  6  0  2  6  2  6  7  6  0  6  0  7  4  4  7  0 11  5  2  3  6
  5  3  6  8  4 11  4  2  0  2  0  2  2  6  6  5  9  0  8  4 11 11  0 11
  2  5  7  7 11  7 11  0  2 11  2  0 11  9  4 11 11  9  2  7  0  0  2  2
  8  2 11  6  7  7  3 11  0  2  4  4  7 11  2  7  2 11  5  6  0  5  0  7
  0  0  0  2  7  0  0  6  0 11  0  5  5  0 11  0  0  2  8  5  3 11  8  0
  8  0  0  4  0  0  0  0  0  8  7  0]
Done
{'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 8, 'epochs': 30}
0.8859649122807017
2024-11-18-11-43-35-conv3d-model.keras