Testing with parameters: {'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 8, 'epochs': 15}

Iteration 1/3
C:\Users\james\.conda\envs\recog\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2024-11-19 05:06:52.512693: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Epoch 1/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 135s 1s/step - accuracy: 0.3546 - loss: 176.6481 - val_accuracy: 0.1623 - val_loss: 131.6410
Epoch 2/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.5080 - loss: 2.8663 - val_accuracy: 0.4693 - val_loss: 3.7775
Epoch 3/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.5022 - loss: 2.1922 - val_accuracy: 0.5307 - val_loss: 2.7212
Epoch 4/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.5225 - loss: 1.7506 - val_accuracy: 0.5833 - val_loss: 3.5908
Epoch 5/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.5115 - loss: 2.4480 - val_accuracy: 0.5175 - val_loss: 3.2164
Epoch 6/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.5201 - loss: 1.6938 - val_accuracy: 0.5132 - val_loss: 2.1174
Epoch 7/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.5322 - loss: 1.8402 - val_accuracy: 0.4211 - val_loss: 1.5095
Epoch 8/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4894 - loss: 1.6077 - val_accuracy: 0.4956 - val_loss: 2.7165
Epoch 9/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4733 - loss: 2.1689 - val_accuracy: 0.3377 - val_loss: 19.5544
Epoch 10/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4743 - loss: 2.0525 - val_accuracy: 0.3728 - val_loss: 130.8977
Epoch 11/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4451 - loss: 2.0304 - val_accuracy: 0.3553 - val_loss: 6.4859
Epoch 12/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4280 - loss: 1.7857 - val_accuracy: 0.4825 - val_loss: 1.5185
Epoch 13/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4127 - loss: 1.7539 - val_accuracy: 0.3904 - val_loss: 1.5919
Epoch 14/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4197 - loss: 1.6573 - val_accuracy: 0.3684 - val_loss: 1.6633
Epoch 15/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 135s 1s/step - accuracy: 0.4181 - loss: 1.6775 - val_accuracy: 0.3991 - val_loss: 1.5199
8/8 ━━━━━━━━━━━━━━━━━━━━ 1s 158ms/step
Iteration 1 Validation Accuracy: 0.3991228070175439
Best model saved with accuracy 0.3991228070175439

Iteration 2/3
C:\Users\james\.conda\envs\recog\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Epoch 1/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 137s 1s/step - accuracy: 0.3201 - loss: 225.8444 - val_accuracy: 0.3640 - val_loss: 14.2735
Epoch 2/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 135s 1s/step - accuracy: 0.4711 - loss: 2.8166 - val_accuracy: 0.5044 - val_loss: 3.3463
Epoch 3/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4343 - loss: 2.3411 - val_accuracy: 0.4342 - val_loss: 2.4443
Epoch 4/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4260 - loss: 1.9665 - val_accuracy: 0.5482 - val_loss: 4.0159
Epoch 5/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4719 - loss: 1.9797 - val_accuracy: 0.4956 - val_loss: 1.7236
Epoch 6/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4255 - loss: 2.0663 - val_accuracy: 0.5000 - val_loss: 1.9791
Epoch 7/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4433 - loss: 1.7714 - val_accuracy: 0.5000 - val_loss: 2.0067
Epoch 8/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4105 - loss: 1.7639 - val_accuracy: 0.5526 - val_loss: 1.8286
Epoch 9/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4088 - loss: 1.7823 - val_accuracy: 0.5570 - val_loss: 1.6785
Epoch 10/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4085 - loss: 1.8233 - val_accuracy: 0.4737 - val_loss: 1.7336
Epoch 11/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4257 - loss: 1.7100 - val_accuracy: 0.4868 - val_loss: 1.7500
Epoch 12/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4413 - loss: 1.6514 - val_accuracy: 0.5482 - val_loss: 1.9127
Epoch 13/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4582 - loss: 1.6451 - val_accuracy: 0.4868 - val_loss: 1.9452
Epoch 14/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4097 - loss: 1.7207 - val_accuracy: 0.4868 - val_loss: 2.0082
Epoch 15/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4688 - loss: 1.6615 - val_accuracy: 0.6009 - val_loss: 1.9338
8/8 ━━━━━━━━━━━━━━━━━━━━ 1s 144ms/step
Iteration 2 Validation Accuracy: 0.6008771929824561
Best model saved with accuracy 0.6008771929824561

Iteration 3/3
C:\Users\james\.conda\envs\recog\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Epoch 1/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 135s 1s/step - accuracy: 0.3222 - loss: 235.8530 - val_accuracy: 0.3202 - val_loss: 84.9546
Epoch 2/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4902 - loss: 8.0108 - val_accuracy: 0.4825 - val_loss: 6.2642
Epoch 3/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4298 - loss: 2.2357 - val_accuracy: 0.3904 - val_loss: 2.0719
Epoch 4/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3489 - loss: 2.4450 - val_accuracy: 0.3947 - val_loss: 2.0032
Epoch 5/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3655 - loss: 2.1073 - val_accuracy: 0.3991 - val_loss: 1.9540
Epoch 6/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3655 - loss: 1.9970 - val_accuracy: 0.3728 - val_loss: 1.8727
Epoch 7/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3826 - loss: 1.9974 - val_accuracy: 0.3947 - val_loss: 1.8168
Epoch 8/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3531 - loss: 2.0082 - val_accuracy: 0.3991 - val_loss: 1.8490
Epoch 9/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3514 - loss: 1.9981 - val_accuracy: 0.4123 - val_loss: 3.0691
Epoch 10/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3537 - loss: 2.3123 - val_accuracy: 0.3772 - val_loss: 1.8521
Epoch 11/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4059 - loss: 1.9454 - val_accuracy: 0.5088 - val_loss: 1.6734
Epoch 12/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.4326 - loss: 1.8643 - val_accuracy: 0.3728 - val_loss: 1.7515
Epoch 13/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3776 - loss: 1.8756 - val_accuracy: 0.3772 - val_loss: 1.7422
Epoch 14/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3690 - loss: 1.9610 - val_accuracy: 0.3991 - val_loss: 1.7484
Epoch 15/15
114/114 ━━━━━━━━━━━━━━━━━━━━ 134s 1s/step - accuracy: 0.3745 - loss: 1.9292 - val_accuracy: 0.3991 - val_loss: 1.7598
WARNING:tensorflow:5 out of the last 17 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x000001F6343FB740> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
8/8 ━━━━━━━━━━━━━━━━━━━━ 1s 142ms/step
Iteration 3 Validation Accuracy: 0.3991228070175439

Best hyperparameters: {'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 8, 'epochs': 15} with accuracy: 0.6008771929824561 
True labels: [11  6  2  0  2  8  0  8  2  6  0  5  2  3  7  0  2  6  0  7 11  5  6  0
  0  4  6 11  0  5  3  9  8  7  6  9  6  6  2  3 11 11  2  7  0  6  0  8
  7  0  7  4  9  0  0  7  5  0  2  8  0  0  6  8  8  3  0  6  0  0  5  5
  6  8  4  0  7  6 11 10  5  4  0  0  0  0  2 11  3  0  6  6  6 10  0  6
  6  2 11 11 11  8  8  0  6  3  6  6  2  5  6  7  0  0  2  0  0  4  6 11
  2  0  0  6  0  0  7 11  8  7 11  6  0  2  7 11  0  2  0  0  6  0  5  2
  0  0  0  0  0  5 11  4  0  5  6  6  6 11  7  4  7  6  2  0 11  8 11  0
  2  2  6  4  6  2  6  7  5  0 11  0  5  7  2  0 10  4  4  0  2  0  0  8
  4  0  7  6  6  6  1  2  2  8  0  9  0 11  8  4  0  2  5  6  0  0  3  7
  7  4  2  4  3  9  6  0  3 11  8  0]
Predicted labels: [ 2  6  2  0  2  0  0  0  2  6  0  0  2  0  7  0  2  0  0  7  2  0  6  0
  0  4  6 11  0  0  0  9  0  7  0  9  0  0  2  0  0  0  2  7  0  0  0  0
  7  0  7  4  9  0  0  7  0  0  2  0  0  0  0  0  0  0  0  6  0  0  0  0
  0  0  4  0  7  6  0  0  0  4  0  0  6  0  2  0  0  0  0  2  0  0  0  0
  6  2  2  2  2  0  0  0  0  0  0  0  2  0  9  7  0  0  2  0  0  4  0  2
  2  0  0  6  0  0  7  2  0  7  2  0  0  2  7  0  0  2  0  0  0  0  0  2
  0  6  0  0  0  0 11  4  0  0  0  0  0  0  7  4  7  6  2  0  4  0  0  0
  2  2  0  4  0  2  9  7  0  0  0  0  0  7  2  0  0  4  4  0  2  6  0  0
  4  0  7  0  6  0  0  2  2  0  0  9  0  2  0  4  0  2  0  0  0  0  7  7
  7  4  2  4  3  9  6  0  0  2  0  0]
Done
{'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 8, 'epochs': 15}
0.6008771929824561
2024-11-19-06-14-11-conv3d-model.keras