
Testing with parameters: {'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 8, 'epochs': 10}

Iteration 1/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 6s/step - accuracy: 0.3422 - loss: 8.2120 - val_accuracy: 0.2961 - val_loss: 4.7110
Epoch 2/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 498s 5s/step - accuracy: 0.5289 - loss: 1.8823 - val_accuracy: 0.3575 - val_loss: 1.6689
Epoch 3/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 494s 5s/step - accuracy: 0.5476 - loss: 1.5601 - val_accuracy: 0.3464 - val_loss: 1.8744
Epoch 4/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 508s 5s/step - accuracy: 0.5280 - loss: 1.5387 - val_accuracy: 0.1732 - val_loss: 4.5757
Epoch 5/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 516s 6s/step - accuracy: 0.5639 - loss: 1.4842 - val_accuracy: 0.5140 - val_loss: 2.0301
Epoch 6/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 485s 5s/step - accuracy: 0.5444 - loss: 1.4396 - val_accuracy: 0.5922 - val_loss: 1.3436
Epoch 7/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 498s 5s/step - accuracy: 0.5974 - loss: 1.3357 - val_accuracy: 0.4637 - val_loss: 1.3620
Epoch 8/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 523s 6s/step - accuracy: 0.5700 - loss: 1.2336 - val_accuracy: 0.6592 - val_loss: 1.1908
Epoch 9/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 477s 5s/step - accuracy: 0.6138 - loss: 1.2104 - val_accuracy: 0.6592 - val_loss: 1.0503
Epoch 10/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 476s 5s/step - accuracy: 0.6134 - loss: 1.1721 - val_accuracy: 0.6592 - val_loss: 1.0487
6/6 ━━━━━━━━━━━━━━━━━━━━ 27s 5s/step

WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 

Iteration 1 Validation Accuracy: 0.659217877094972
Best model saved with accuracy 0.659217877094972

Iteration 2/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 471s 5s/step - accuracy: 0.3851 - loss: 8.6193 - val_accuracy: 0.2849 - val_loss: 4.9132
Epoch 2/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 499s 5s/step - accuracy: 0.4387 - loss: 2.2797 - val_accuracy: 0.4358 - val_loss: 1.6636
Epoch 3/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 518s 5s/step - accuracy: 0.5185 - loss: 1.6238 - val_accuracy: 0.5754 - val_loss: 1.3920
Epoch 4/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 465s 5s/step - accuracy: 0.5447 - loss: 1.3554 - val_accuracy: 0.5810 - val_loss: 1.4375
Epoch 5/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 505s 5s/step - accuracy: 0.6024 - loss: 1.2935 - val_accuracy: 0.6257 - val_loss: 1.5099
Epoch 6/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 498s 5s/step - accuracy: 0.5951 - loss: 1.2873 - val_accuracy: 0.6145 - val_loss: 1.3494
Epoch 7/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 500s 5s/step - accuracy: 0.5396 - loss: 1.3187 - val_accuracy: 0.6425 - val_loss: 1.3233
Epoch 8/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 477s 5s/step - accuracy: 0.6087 - loss: 1.1867 - val_accuracy: 0.6480 - val_loss: 1.2498
Epoch 9/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 460s 5s/step - accuracy: 0.5881 - loss: 1.2418 - val_accuracy: 0.6480 - val_loss: 1.4922
Epoch 10/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 463s 5s/step - accuracy: 0.6135 - loss: 1.1692 - val_accuracy: 0.6480 - val_loss: 1.2227
6/6 ━━━━━━━━━━━━━━━━━━━━ 27s 4s/step
Iteration 2 Validation Accuracy: 0.6480446927374302

Iteration 3/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 468s 5s/step - accuracy: 0.3671 - loss: 7.7411 - val_accuracy: 0.1844 - val_loss: 3.6358
Epoch 2/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 465s 5s/step - accuracy: 0.4876 - loss: 1.8262 - val_accuracy: 0.5698 - val_loss: 1.2828
Epoch 3/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 496s 5s/step - accuracy: 0.5092 - loss: 1.5827 - val_accuracy: 0.5587 - val_loss: 1.2376
Epoch 4/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 505s 5s/step - accuracy: 0.5690 - loss: 1.3734 - val_accuracy: 0.5754 - val_loss: 1.2163
Epoch 5/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.5355 - loss: 1.3992 - val_accuracy: 0.6592 - val_loss: 1.0211
Epoch 6/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 467s 5s/step - accuracy: 0.5949 - loss: 1.2427 - val_accuracy: 0.5922 - val_loss: 1.2257
Epoch 7/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 497s 5s/step - accuracy: 0.5734 - loss: 1.2764 - val_accuracy: 0.5866 - val_loss: 1.1540
Epoch 8/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 467s 5s/step - accuracy: 0.5901 - loss: 1.2554 - val_accuracy: 0.6536 - val_loss: 0.9690
Epoch 9/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 465s 5s/step - accuracy: 0.6078 - loss: 1.2212 - val_accuracy: 0.6648 - val_loss: 1.0887
Epoch 10/10
90/90 ━━━━━━━━━━━━━━━━━━━━ 519s 5s/step - accuracy: 0.5386 - loss: 1.3269 - val_accuracy: 0.6145 - val_loss: 1.0945

WARNING:tensorflow:5 out of the last 13 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7b2f63677520> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.

6/6 ━━━━━━━━━━━━━━━━━━━━ 27s 4s/step
Iteration 3 Validation Accuracy: 0.6145251396648045

Testing with parameters: {'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 8, 'epochs': 20}

Iteration 1/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 485s 5s/step - accuracy: 0.3554 - loss: 7.2309 - val_accuracy: 0.4022 - val_loss: 2.2000
Epoch 2/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 491s 5s/step - accuracy: 0.4637 - loss: 1.9061 - val_accuracy: 0.3575 - val_loss: 1.7239
Epoch 3/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 477s 5s/step - accuracy: 0.5535 - loss: 1.5164 - val_accuracy: 0.5475 - val_loss: 1.2425
Epoch 4/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 488s 5s/step - accuracy: 0.5323 - loss: 1.4588 - val_accuracy: 0.4581 - val_loss: 2.1011
Epoch 5/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 491s 5s/step - accuracy: 0.6069 - loss: 1.2518 - val_accuracy: 0.6313 - val_loss: 1.3187
Epoch 6/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 517s 5s/step - accuracy: 0.5801 - loss: 1.3128 - val_accuracy: 0.4358 - val_loss: 1.6472
Epoch 7/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 481s 5s/step - accuracy: 0.6130 - loss: 1.2354 - val_accuracy: 0.6480 - val_loss: 1.0805
Epoch 8/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.6179 - loss: 1.0608 - val_accuracy: 0.6983 - val_loss: 0.9597
Epoch 9/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 502s 5s/step - accuracy: 0.6587 - loss: 1.0666 - val_accuracy: 0.6480 - val_loss: 1.1007
Epoch 10/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 474s 5s/step - accuracy: 0.6638 - loss: 1.0732 - val_accuracy: 0.5642 - val_loss: 1.5220
Epoch 11/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 504s 5s/step - accuracy: 0.6203 - loss: 1.1238 - val_accuracy: 0.6257 - val_loss: 1.1880
Epoch 12/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 496s 5s/step - accuracy: 0.6744 - loss: 0.9933 - val_accuracy: 0.5978 - val_loss: 1.2126
Epoch 13/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 488s 5s/step - accuracy: 0.6255 - loss: 1.1364 - val_accuracy: 0.6257 - val_loss: 1.2926
Epoch 14/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 503s 5s/step - accuracy: 0.6273 - loss: 1.1653 - val_accuracy: 0.5978 - val_loss: 1.3572
Epoch 15/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 474s 5s/step - accuracy: 0.6075 - loss: 1.1451 - val_accuracy: 0.6369 - val_loss: 1.1351
Epoch 16/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 505s 5s/step - accuracy: 0.6283 - loss: 1.0840 - val_accuracy: 0.6313 - val_loss: 1.1517
Epoch 17/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 500s 5s/step - accuracy: 0.6353 - loss: 1.0400 - val_accuracy: 0.5978 - val_loss: 1.2310
Epoch 18/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.6568 - loss: 1.1023 - val_accuracy: 0.6536 - val_loss: 1.1324
Epoch 19/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 500s 5s/step - accuracy: 0.6340 - loss: 1.0881 - val_accuracy: 0.6145 - val_loss: 1.3785
Epoch 20/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 476s 5s/step - accuracy: 0.6523 - loss: 0.9641 - val_accuracy: 0.6313 - val_loss: 1.0744

WARNING:tensorflow:5 out of the last 13 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7b2f63f38c10> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.

6/6 ━━━━━━━━━━━━━━━━━━━━ 27s 5s/step
Iteration 1 Validation Accuracy: 0.6312849162011173

Iteration 2/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 476s 5s/step - accuracy: 0.3517 - loss: 7.9585 - val_accuracy: 0.2346 - val_loss: 4.7642
Epoch 2/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 516s 5s/step - accuracy: 0.4449 - loss: 2.7323 - val_accuracy: 0.3017 - val_loss: 1.7104
Epoch 3/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 484s 5s/step - accuracy: 0.4567 - loss: 1.8009 - val_accuracy: 0.5642 - val_loss: 1.5592
Epoch 4/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 470s 5s/step - accuracy: 0.5814 - loss: 1.4426 - val_accuracy: 0.5531 - val_loss: 1.7907
Epoch 5/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.5574 - loss: 1.3706 - val_accuracy: 0.5475 - val_loss: 1.6922
Epoch 6/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 503s 5s/step - accuracy: 0.6070 - loss: 1.2605 - val_accuracy: 0.4637 - val_loss: 2.4071
Epoch 7/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 515s 5s/step - accuracy: 0.5810 - loss: 1.2909 - val_accuracy: 0.6089 - val_loss: 1.4244
Epoch 8/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 471s 5s/step - accuracy: 0.6047 - loss: 1.1365 - val_accuracy: 0.6201 - val_loss: 1.2697
Epoch 9/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 502s 5s/step - accuracy: 0.6227 - loss: 1.1860 - val_accuracy: 0.4581 - val_loss: 1.6872
Epoch 10/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.6109 - loss: 1.2533 - val_accuracy: 0.5810 - val_loss: 1.7499
Epoch 11/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 497s 5s/step - accuracy: 0.6319 - loss: 1.1001 - val_accuracy: 0.6089 - val_loss: 1.4751
Epoch 12/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 466s 5s/step - accuracy: 0.6300 - loss: 1.0465 - val_accuracy: 0.6145 - val_loss: 1.6082
Epoch 13/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 506s 5s/step - accuracy: 0.6531 - loss: 1.0680 - val_accuracy: 0.4413 - val_loss: 3.1017
Epoch 14/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 502s 5s/step - accuracy: 0.6154 - loss: 1.1517 - val_accuracy: 0.6425 - val_loss: 1.3628
Epoch 15/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 512s 5s/step - accuracy: 0.6668 - loss: 1.0502 - val_accuracy: 0.5587 - val_loss: 1.7368
Epoch 16/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 492s 5s/step - accuracy: 0.5829 - loss: 1.2218 - val_accuracy: 0.4749 - val_loss: 2.5367
Epoch 17/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 498s 5s/step - accuracy: 0.6484 - loss: 1.0835 - val_accuracy: 0.5531 - val_loss: 1.2359
Epoch 18/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 503s 5s/step - accuracy: 0.6459 - loss: 0.9931 - val_accuracy: 0.6313 - val_loss: 1.2810
Epoch 19/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 500s 5s/step - accuracy: 0.6808 - loss: 0.9271 - val_accuracy: 0.6648 - val_loss: 1.3879
Epoch 20/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 518s 5s/step - accuracy: 0.6865 - loss: 0.9739 - val_accuracy: 0.7151 - val_loss: 1.2079
6/6 ━━━━━━━━━━━━━━━━━━━━ 26s 4s/step

WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 

Iteration 2 Validation Accuracy: 0.7150837988826816
Best model saved with accuracy 0.7150837988826816

Iteration 3/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 473s 5s/step - accuracy: 0.3143 - loss: 7.6651 - val_accuracy: 0.1285 - val_loss: 5.3275
Epoch 2/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.4898 - loss: 2.1808 - val_accuracy: 0.1676 - val_loss: 2.7955
Epoch 3/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 517s 5s/step - accuracy: 0.4685 - loss: 1.6604 - val_accuracy: 0.6369 - val_loss: 1.4631
Epoch 4/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 504s 5s/step - accuracy: 0.5700 - loss: 1.4301 - val_accuracy: 0.5196 - val_loss: 1.6135
Epoch 5/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 484s 5s/step - accuracy: 0.5521 - loss: 1.5409 - val_accuracy: 0.6480 - val_loss: 1.1072
Epoch 6/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 466s 5s/step - accuracy: 0.5641 - loss: 1.4414 - val_accuracy: 0.6034 - val_loss: 1.1682
Epoch 7/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.5836 - loss: 1.3264 - val_accuracy: 0.4581 - val_loss: 1.4704
Epoch 8/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 508s 5s/step - accuracy: 0.6773 - loss: 1.0555 - val_accuracy: 0.6425 - val_loss: 1.0360
Epoch 9/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 503s 5s/step - accuracy: 0.6367 - loss: 1.0938 - val_accuracy: 0.6592 - val_loss: 0.9861
Epoch 10/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 480s 5s/step - accuracy: 0.6743 - loss: 0.9569 - val_accuracy: 0.6034 - val_loss: 1.0654
Epoch 11/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 500s 5s/step - accuracy: 0.6249 - loss: 1.1609 - val_accuracy: 0.6816 - val_loss: 0.9103
Epoch 12/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.6560 - loss: 1.0515 - val_accuracy: 0.6704 - val_loss: 0.8794
Epoch 13/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 484s 5s/step - accuracy: 0.6598 - loss: 1.0645 - val_accuracy: 0.6648 - val_loss: 1.0332
Epoch 14/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 496s 6s/step - accuracy: 0.6739 - loss: 1.0177 - val_accuracy: 0.6760 - val_loss: 0.8706
Epoch 15/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 487s 5s/step - accuracy: 0.6392 - loss: 1.0617 - val_accuracy: 0.6872 - val_loss: 0.8570
Epoch 16/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 487s 5s/step - accuracy: 0.6548 - loss: 1.0736 - val_accuracy: 0.6425 - val_loss: 1.1483
Epoch 17/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 506s 5s/step - accuracy: 0.6111 - loss: 1.0564 - val_accuracy: 0.7095 - val_loss: 0.8404
Epoch 18/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 501s 5s/step - accuracy: 0.6494 - loss: 0.9523 - val_accuracy: 0.7095 - val_loss: 0.8519
Epoch 19/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 516s 5s/step - accuracy: 0.6625 - loss: 0.9966 - val_accuracy: 0.6480 - val_loss: 1.0167
Epoch 20/20
90/90 ━━━━━━━━━━━━━━━━━━━━ 486s 5s/step - accuracy: 0.6962 - loss: 0.9098 - val_accuracy: 0.6536 - val_loss: 0.8413
6/6 ━━━━━━━━━━━━━━━━━━━━ 27s 5s/step
Iteration 3 Validation Accuracy: 0.6536312849162011

Testing with parameters: {'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 16, 'epochs': 10}

Iteration 1/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 502s 11s/step - accuracy: 0.3857 - loss: 7.2683 - val_accuracy: 0.0782 - val_loss: 14.8447
Epoch 2/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 489s 11s/step - accuracy: 0.5160 - loss: 2.1376 - val_accuracy: 0.2067 - val_loss: 4.6479
Epoch 3/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 479s 10s/step - accuracy: 0.5390 - loss: 1.5506 - val_accuracy: 0.4190 - val_loss: 2.0658
Epoch 4/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 525s 11s/step - accuracy: 0.5829 - loss: 1.2797 - val_accuracy: 0.6034 - val_loss: 1.2803
Epoch 5/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 486s 10s/step - accuracy: 0.5839 - loss: 1.3384 - val_accuracy: 0.5028 - val_loss: 1.3823
Epoch 6/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 502s 10s/step - accuracy: 0.6274 - loss: 1.0853 - val_accuracy: 0.6480 - val_loss: 1.1087
Epoch 7/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 500s 10s/step - accuracy: 0.6154 - loss: 1.1184 - val_accuracy: 0.5922 - val_loss: 1.1220
Epoch 8/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 504s 10s/step - accuracy: 0.6760 - loss: 0.9959 - val_accuracy: 0.6257 - val_loss: 1.1124
Epoch 9/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 516s 11s/step - accuracy: 0.6468 - loss: 1.1067 - val_accuracy: 0.5419 - val_loss: 1.3223
Epoch 10/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 486s 10s/step - accuracy: 0.6637 - loss: 0.9910 - val_accuracy: 0.6927 - val_loss: 1.0524
6/6 ━━━━━━━━━━━━━━━━━━━━ 25s 4s/step
Iteration 1 Validation Accuracy: 0.6927374301675978

Iteration 2/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 484s 11s/step - accuracy: 0.3580 - loss: 7.0241 - val_accuracy: 0.1173 - val_loss: 21.8756
Epoch 2/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 501s 11s/step - accuracy: 0.5320 - loss: 1.9358 - val_accuracy: 0.2570 - val_loss: 2.1362
Epoch 3/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 489s 11s/step - accuracy: 0.5314 - loss: 1.7225 - val_accuracy: 0.4469 - val_loss: 1.4602
Epoch 4/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 486s 11s/step - accuracy: 0.6039 - loss: 1.3103 - val_accuracy: 0.5810 - val_loss: 1.3170
Epoch 5/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 473s 11s/step - accuracy: 0.6153 - loss: 1.2837 - val_accuracy: 0.5978 - val_loss: 1.2365
Epoch 6/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 497s 10s/step - accuracy: 0.6559 - loss: 1.0346 - val_accuracy: 0.6369 - val_loss: 1.2223
Epoch 7/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 523s 11s/step - accuracy: 0.6433 - loss: 1.0606 - val_accuracy: 0.6480 - val_loss: 1.1165
Epoch 8/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 475s 11s/step - accuracy: 0.6378 - loss: 1.0274 - val_accuracy: 0.6648 - val_loss: 1.1383
Epoch 9/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 500s 11s/step - accuracy: 0.6693 - loss: 1.0028 - val_accuracy: 0.6425 - val_loss: 1.1278
Epoch 10/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 519s 11s/step - accuracy: 0.6903 - loss: 0.8210 - val_accuracy: 0.5922 - val_loss: 1.5446
6/6 ━━━━━━━━━━━━━━━━━━━━ 25s 4s/step
Iteration 2 Validation Accuracy: 0.5921787709497207

Iteration 3/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 475s 10s/step - accuracy: 0.3811 - loss: 6.8774 - val_accuracy: 0.0894 - val_loss: 37.9942
Epoch 2/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 521s 11s/step - accuracy: 0.4945 - loss: 2.4628 - val_accuracy: 0.1173 - val_loss: 6.4242
Epoch 3/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 499s 11s/step - accuracy: 0.5063 - loss: 2.1410 - val_accuracy: 0.2737 - val_loss: 2.0856
Epoch 4/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 490s 11s/step - accuracy: 0.5327 - loss: 1.5671 - val_accuracy: 0.4190 - val_loss: 1.4963
Epoch 5/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 498s 11s/step - accuracy: 0.5941 - loss: 1.3160 - val_accuracy: 0.6257 - val_loss: 1.0500
Epoch 6/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 474s 11s/step - accuracy: 0.6648 - loss: 1.0001 - val_accuracy: 0.6536 - val_loss: 0.9416
Epoch 7/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 501s 11s/step - accuracy: 0.6543 - loss: 1.0443 - val_accuracy: 0.6480 - val_loss: 0.9847
Epoch 8/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 474s 11s/step - accuracy: 0.6613 - loss: 1.0601 - val_accuracy: 0.6816 - val_loss: 0.8758
Epoch 9/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 473s 11s/step - accuracy: 0.6458 - loss: 1.0007 - val_accuracy: 0.6313 - val_loss: 0.8756
Epoch 10/10
45/45 ━━━━━━━━━━━━━━━━━━━━ 516s 11s/step - accuracy: 0.6924 - loss: 0.8866 - val_accuracy: 0.6425 - val_loss: 0.8897
6/6 ━━━━━━━━━━━━━━━━━━━━ 27s 5s/step
Iteration 3 Validation Accuracy: 0.6424581005586593

Testing with parameters: {'conv_filters': [32, 64, 128], 'kernel_size': (3, 3, 3), 'dense_units': 512, 'dropout_rate': 0.4, 'learning_rate': 0.001, 'batch_size': 16, 'epochs': 20}

Iteration 1/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 474s 10s/step - accuracy: 0.3619 - loss: 6.7591 - val_accuracy: 0.2737 - val_loss: 33.3106
Epoch 2/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 469s 10s/step - accuracy: 0.4982 - loss: 2.2283 - val_accuracy: 0.1564 - val_loss: 4.3373
Epoch 3/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 475s 11s/step - accuracy: 0.5796 - loss: 1.4431 - val_accuracy: 0.4134 - val_loss: 1.7322
Epoch 4/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 498s 10s/step - accuracy: 0.6166 - loss: 1.2066 - val_accuracy: 0.6704 - val_loss: 1.2138
Epoch 5/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 514s 11s/step - accuracy: 0.6311 - loss: 1.2050 - val_accuracy: 0.6369 - val_loss: 1.2165
Epoch 6/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 488s 10s/step - accuracy: 0.6156 - loss: 1.2446 - val_accuracy: 0.6872 - val_loss: 1.0755
Epoch 7/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 471s 10s/step - accuracy: 0.6243 - loss: 1.0928 - val_accuracy: 0.6257 - val_loss: 1.0282
Epoch 8/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 500s 10s/step - accuracy: 0.6721 - loss: 0.9936 - val_accuracy: 0.2905 - val_loss: 3.8936
Epoch 9/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 469s 10s/step - accuracy: 0.6330 - loss: 1.1454 - val_accuracy: 0.4693 - val_loss: 1.5614
Epoch 10/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 502s 10s/step - accuracy: 0.6854 - loss: 0.8906 - val_accuracy: 0.6816 - val_loss: 0.9629
Epoch 11/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 503s 10s/step - accuracy: 0.6046 - loss: 1.1252 - val_accuracy: 0.6480 - val_loss: 1.2281
Epoch 12/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 481s 11s/step - accuracy: 0.6796 - loss: 0.9407 - val_accuracy: 0.7039 - val_loss: 0.9494
Epoch 13/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 488s 10s/step - accuracy: 0.6861 - loss: 0.8618 - val_accuracy: 0.7263 - val_loss: 0.8652
Epoch 14/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 500s 10s/step - accuracy: 0.6988 - loss: 0.8222 - val_accuracy: 0.7430 - val_loss: 0.8148
Epoch 15/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 469s 10s/step - accuracy: 0.7093 - loss: 0.8029 - val_accuracy: 0.6872 - val_loss: 0.9704
Epoch 16/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 567s 12s/step - accuracy: 0.6823 - loss: 0.8418 - val_accuracy: 0.7207 - val_loss: 1.0139
Epoch 17/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 467s 10s/step - accuracy: 0.7183 - loss: 0.7819 - val_accuracy: 0.7263 - val_loss: 0.9668
Epoch 18/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 500s 10s/step - accuracy: 0.7022 - loss: 0.8440 - val_accuracy: 0.7430 - val_loss: 0.8602
Epoch 19/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 468s 10s/step - accuracy: 0.7445 - loss: 0.7497 - val_accuracy: 0.7430 - val_loss: 0.9419
Epoch 20/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 517s 11s/step - accuracy: 0.7686 - loss: 0.6322 - val_accuracy: 0.7430 - val_loss: 1.0739
6/6 ━━━━━━━━━━━━━━━━━━━━ 27s 4s/step

WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 

Iteration 1 Validation Accuracy: 0.7430167597765364
Best model saved with accuracy 0.7430167597765364

Iteration 2/3

/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

Epoch 1/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 470s 10s/step - accuracy: 0.3743 - loss: 7.3657 - val_accuracy: 0.1453 - val_loss: 28.8529
Epoch 2/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 467s 10s/step - accuracy: 0.4990 - loss: 1.9989 - val_accuracy: 0.1788 - val_loss: 4.1237
Epoch 3/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 498s 10s/step - accuracy: 0.6346 - loss: 1.3282 - val_accuracy: 0.2905 - val_loss: 2.1404
Epoch 4/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 505s 10s/step - accuracy: 0.6254 - loss: 1.2227 - val_accuracy: 0.6145 - val_loss: 1.1697
Epoch 5/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 498s 10s/step - accuracy: 0.6074 - loss: 1.1949 - val_accuracy: 0.6536 - val_loss: 1.1830
Epoch 6/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 503s 10s/step - accuracy: 0.6038 - loss: 1.0529 - val_accuracy: 0.6034 - val_loss: 1.3632
Epoch 7/20
45/45 ━━━━━━━━━━━━━━━━━━━━ 501s 10s/step - accuracy: 0.6804 - loss: 0.9303 - val_accuracy: 0.5810 - val_loss: 1.3502
Epoch 8/20
14/45 ━━━━━━━━━━━━━━━━━━━━ 5:03 10s/step - accuracy: 0.5887 - loss: 1.1158

